type AggregateCustomer {
  count: Int!
}

type AggregateGallery {
  count: Int!
}

type AggregateTestimonial {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Customer {
  customer_id: Int!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  budget: String!
  description: String!
  testimonial(where: TestimonialWhereInput, orderBy: TestimonialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Testimonial!]
}

type CustomerConnection {
  pageInfo: PageInfo!
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  budget: String!
  description: String!
  testimonial: TestimonialCreateManyWithoutCustomerInput
}

input CustomerCreateOneWithoutTestimonialInput {
  create: CustomerCreateWithoutTestimonialInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutTestimonialInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  budget: String!
  description: String!
}

type CustomerEdge {
  node: Customer!
  cursor: String!
}

enum CustomerOrderByInput {
  customer_id_ASC
  customer_id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  budget_ASC
  budget_DESC
  description_ASC
  description_DESC
}

type CustomerPreviousValues {
  customer_id: Int!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  budget: String!
  description: String!
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
  AND: [CustomerSubscriptionWhereInput!]
  OR: [CustomerSubscriptionWhereInput!]
  NOT: [CustomerSubscriptionWhereInput!]
}

input CustomerUpdateInput {
  firstName: String
  lastName: String
  email: String
  phone: String
  budget: String
  description: String
  testimonial: TestimonialUpdateManyWithoutCustomerInput
}

input CustomerUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  phone: String
  budget: String
  description: String
}

input CustomerUpdateOneRequiredWithoutTestimonialInput {
  create: CustomerCreateWithoutTestimonialInput
  update: CustomerUpdateWithoutTestimonialDataInput
  upsert: CustomerUpsertWithoutTestimonialInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateWithoutTestimonialDataInput {
  firstName: String
  lastName: String
  email: String
  phone: String
  budget: String
  description: String
}

input CustomerUpsertWithoutTestimonialInput {
  update: CustomerUpdateWithoutTestimonialDataInput!
  create: CustomerCreateWithoutTestimonialInput!
}

input CustomerWhereInput {
  customer_id: Int
  customer_id_not: Int
  customer_id_in: [Int!]
  customer_id_not_in: [Int!]
  customer_id_lt: Int
  customer_id_lte: Int
  customer_id_gt: Int
  customer_id_gte: Int
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  budget: String
  budget_not: String
  budget_in: [String!]
  budget_not_in: [String!]
  budget_lt: String
  budget_lte: String
  budget_gt: String
  budget_gte: String
  budget_contains: String
  budget_not_contains: String
  budget_starts_with: String
  budget_not_starts_with: String
  budget_ends_with: String
  budget_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  testimonial_every: TestimonialWhereInput
  testimonial_some: TestimonialWhereInput
  testimonial_none: TestimonialWhereInput
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
}

input CustomerWhereUniqueInput {
  customer_id: Int
  email: String
}

type Gallery {
  gallery_id: Int!
  galNumberItems: Int!
  galPath: String!
  galType: String!
  galRank: Int!
}

type GalleryConnection {
  pageInfo: PageInfo!
  edges: [GalleryEdge]!
  aggregate: AggregateGallery!
}

input GalleryCreateInput {
  galNumberItems: Int!
  galPath: String!
  galType: String!
  galRank: Int!
}

input GalleryCreateOneInput {
  create: GalleryCreateInput
  connect: GalleryWhereUniqueInput
}

type GalleryEdge {
  node: Gallery!
  cursor: String!
}

enum GalleryOrderByInput {
  gallery_id_ASC
  gallery_id_DESC
  galNumberItems_ASC
  galNumberItems_DESC
  galPath_ASC
  galPath_DESC
  galType_ASC
  galType_DESC
  galRank_ASC
  galRank_DESC
}

type GalleryPreviousValues {
  gallery_id: Int!
  galNumberItems: Int!
  galPath: String!
  galType: String!
  galRank: Int!
}

type GallerySubscriptionPayload {
  mutation: MutationType!
  node: Gallery
  updatedFields: [String!]
  previousValues: GalleryPreviousValues
}

input GallerySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GalleryWhereInput
  AND: [GallerySubscriptionWhereInput!]
  OR: [GallerySubscriptionWhereInput!]
  NOT: [GallerySubscriptionWhereInput!]
}

input GalleryUpdateDataInput {
  galNumberItems: Int
  galPath: String
  galType: String
  galRank: Int
}

input GalleryUpdateInput {
  galNumberItems: Int
  galPath: String
  galType: String
  galRank: Int
}

input GalleryUpdateManyMutationInput {
  galNumberItems: Int
  galPath: String
  galType: String
  galRank: Int
}

input GalleryUpdateOneRequiredInput {
  create: GalleryCreateInput
  update: GalleryUpdateDataInput
  upsert: GalleryUpsertNestedInput
  connect: GalleryWhereUniqueInput
}

input GalleryUpsertNestedInput {
  update: GalleryUpdateDataInput!
  create: GalleryCreateInput!
}

input GalleryWhereInput {
  gallery_id: Int
  gallery_id_not: Int
  gallery_id_in: [Int!]
  gallery_id_not_in: [Int!]
  gallery_id_lt: Int
  gallery_id_lte: Int
  gallery_id_gt: Int
  gallery_id_gte: Int
  galNumberItems: Int
  galNumberItems_not: Int
  galNumberItems_in: [Int!]
  galNumberItems_not_in: [Int!]
  galNumberItems_lt: Int
  galNumberItems_lte: Int
  galNumberItems_gt: Int
  galNumberItems_gte: Int
  galPath: String
  galPath_not: String
  galPath_in: [String!]
  galPath_not_in: [String!]
  galPath_lt: String
  galPath_lte: String
  galPath_gt: String
  galPath_gte: String
  galPath_contains: String
  galPath_not_contains: String
  galPath_starts_with: String
  galPath_not_starts_with: String
  galPath_ends_with: String
  galPath_not_ends_with: String
  galType: String
  galType_not: String
  galType_in: [String!]
  galType_not_in: [String!]
  galType_lt: String
  galType_lte: String
  galType_gt: String
  galType_gte: String
  galType_contains: String
  galType_not_contains: String
  galType_starts_with: String
  galType_not_starts_with: String
  galType_ends_with: String
  galType_not_ends_with: String
  galRank: Int
  galRank_not: Int
  galRank_in: [Int!]
  galRank_not_in: [Int!]
  galRank_lt: Int
  galRank_lte: Int
  galRank_gt: Int
  galRank_gte: Int
  AND: [GalleryWhereInput!]
  OR: [GalleryWhereInput!]
  NOT: [GalleryWhereInput!]
}

input GalleryWhereUniqueInput {
  gallery_id: Int
}

scalar Long

type Mutation {
  createCustomer(data: CustomerCreateInput!): Customer!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  createGallery(data: GalleryCreateInput!): Gallery!
  updateGallery(data: GalleryUpdateInput!, where: GalleryWhereUniqueInput!): Gallery
  updateManyGalleries(data: GalleryUpdateManyMutationInput!, where: GalleryWhereInput): BatchPayload!
  upsertGallery(where: GalleryWhereUniqueInput!, create: GalleryCreateInput!, update: GalleryUpdateInput!): Gallery!
  deleteGallery(where: GalleryWhereUniqueInput!): Gallery
  deleteManyGalleries(where: GalleryWhereInput): BatchPayload!
  createTestimonial(data: TestimonialCreateInput!): Testimonial!
  updateTestimonial(data: TestimonialUpdateInput!, where: TestimonialWhereUniqueInput!): Testimonial
  updateManyTestimonials(data: TestimonialUpdateManyMutationInput!, where: TestimonialWhereInput): BatchPayload!
  upsertTestimonial(where: TestimonialWhereUniqueInput!, create: TestimonialCreateInput!, update: TestimonialUpdateInput!): Testimonial!
  deleteTestimonial(where: TestimonialWhereUniqueInput!): Testimonial
  deleteManyTestimonials(where: TestimonialWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  gallery(where: GalleryWhereUniqueInput!): Gallery
  galleries(where: GalleryWhereInput, orderBy: GalleryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gallery]!
  galleriesConnection(where: GalleryWhereInput, orderBy: GalleryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GalleryConnection!
  testimonial(where: TestimonialWhereUniqueInput!): Testimonial
  testimonials(where: TestimonialWhereInput, orderBy: TestimonialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Testimonial]!
  testimonialsConnection(where: TestimonialWhereInput, orderBy: TestimonialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestimonialConnection!
  node(id: ID!): Node
}

type Subscription {
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  gallery(where: GallerySubscriptionWhereInput): GallerySubscriptionPayload
  testimonial(where: TestimonialSubscriptionWhereInput): TestimonialSubscriptionPayload
}

type Testimonial {
  testimonial_id: Int!
  body: String!
  customer: Customer!
  headline: String
  gallery: Gallery!
}

type TestimonialConnection {
  pageInfo: PageInfo!
  edges: [TestimonialEdge]!
  aggregate: AggregateTestimonial!
}

input TestimonialCreateInput {
  body: String!
  customer: CustomerCreateOneWithoutTestimonialInput!
  headline: String
  gallery: GalleryCreateOneInput!
}

input TestimonialCreateManyWithoutCustomerInput {
  create: [TestimonialCreateWithoutCustomerInput!]
  connect: [TestimonialWhereUniqueInput!]
}

input TestimonialCreateWithoutCustomerInput {
  body: String!
  headline: String
  gallery: GalleryCreateOneInput!
}

type TestimonialEdge {
  node: Testimonial!
  cursor: String!
}

enum TestimonialOrderByInput {
  testimonial_id_ASC
  testimonial_id_DESC
  body_ASC
  body_DESC
  headline_ASC
  headline_DESC
}

type TestimonialPreviousValues {
  testimonial_id: Int!
  body: String!
  headline: String
}

input TestimonialScalarWhereInput {
  testimonial_id: Int
  testimonial_id_not: Int
  testimonial_id_in: [Int!]
  testimonial_id_not_in: [Int!]
  testimonial_id_lt: Int
  testimonial_id_lte: Int
  testimonial_id_gt: Int
  testimonial_id_gte: Int
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  headline: String
  headline_not: String
  headline_in: [String!]
  headline_not_in: [String!]
  headline_lt: String
  headline_lte: String
  headline_gt: String
  headline_gte: String
  headline_contains: String
  headline_not_contains: String
  headline_starts_with: String
  headline_not_starts_with: String
  headline_ends_with: String
  headline_not_ends_with: String
  AND: [TestimonialScalarWhereInput!]
  OR: [TestimonialScalarWhereInput!]
  NOT: [TestimonialScalarWhereInput!]
}

type TestimonialSubscriptionPayload {
  mutation: MutationType!
  node: Testimonial
  updatedFields: [String!]
  previousValues: TestimonialPreviousValues
}

input TestimonialSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TestimonialWhereInput
  AND: [TestimonialSubscriptionWhereInput!]
  OR: [TestimonialSubscriptionWhereInput!]
  NOT: [TestimonialSubscriptionWhereInput!]
}

input TestimonialUpdateInput {
  body: String
  customer: CustomerUpdateOneRequiredWithoutTestimonialInput
  headline: String
  gallery: GalleryUpdateOneRequiredInput
}

input TestimonialUpdateManyDataInput {
  body: String
  headline: String
}

input TestimonialUpdateManyMutationInput {
  body: String
  headline: String
}

input TestimonialUpdateManyWithoutCustomerInput {
  create: [TestimonialCreateWithoutCustomerInput!]
  delete: [TestimonialWhereUniqueInput!]
  connect: [TestimonialWhereUniqueInput!]
  set: [TestimonialWhereUniqueInput!]
  disconnect: [TestimonialWhereUniqueInput!]
  update: [TestimonialUpdateWithWhereUniqueWithoutCustomerInput!]
  upsert: [TestimonialUpsertWithWhereUniqueWithoutCustomerInput!]
  deleteMany: [TestimonialScalarWhereInput!]
  updateMany: [TestimonialUpdateManyWithWhereNestedInput!]
}

input TestimonialUpdateManyWithWhereNestedInput {
  where: TestimonialScalarWhereInput!
  data: TestimonialUpdateManyDataInput!
}

input TestimonialUpdateWithoutCustomerDataInput {
  body: String
  headline: String
  gallery: GalleryUpdateOneRequiredInput
}

input TestimonialUpdateWithWhereUniqueWithoutCustomerInput {
  where: TestimonialWhereUniqueInput!
  data: TestimonialUpdateWithoutCustomerDataInput!
}

input TestimonialUpsertWithWhereUniqueWithoutCustomerInput {
  where: TestimonialWhereUniqueInput!
  update: TestimonialUpdateWithoutCustomerDataInput!
  create: TestimonialCreateWithoutCustomerInput!
}

input TestimonialWhereInput {
  testimonial_id: Int
  testimonial_id_not: Int
  testimonial_id_in: [Int!]
  testimonial_id_not_in: [Int!]
  testimonial_id_lt: Int
  testimonial_id_lte: Int
  testimonial_id_gt: Int
  testimonial_id_gte: Int
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  customer: CustomerWhereInput
  headline: String
  headline_not: String
  headline_in: [String!]
  headline_not_in: [String!]
  headline_lt: String
  headline_lte: String
  headline_gt: String
  headline_gte: String
  headline_contains: String
  headline_not_contains: String
  headline_starts_with: String
  headline_not_starts_with: String
  headline_ends_with: String
  headline_not_ends_with: String
  gallery: GalleryWhereInput
  AND: [TestimonialWhereInput!]
  OR: [TestimonialWhereInput!]
  NOT: [TestimonialWhereInput!]
}

input TestimonialWhereUniqueInput {
  testimonial_id: Int
}
